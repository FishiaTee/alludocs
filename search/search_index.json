{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to alludocs!","text":"<p>alludocs is a small project aiming to document various bits of Allumeria in order to assist in modding the game!</p> <p>It is written partially based on information from one of my GitHub Gists.</p> <p>Note</p> <p>This wiki is incomplete, and was written based on limited knowledge of the game's codebase. It is intended to purely assist in modding efforts. Due to the game's nature as an in-development game, things could change unexpectedly.</p> <p>Version Alpha 0.7.2 was used in most parts of this wiki as of July 3rd, 2025.</p> <p>Contributions are welcome. </p>"},{"location":"items/","title":"Items","text":"<p>Items are internally identified via numeric IDs, and are registered by instantiating a new Item instance.</p> <pre><code>Item item = new Item(int x, int y, str stringId);\n</code></pre> <p>An Item takes three basic arguments: texture coordinates (X and Y) and a string identifier. The string identifier is used to refererence the Item in various places (e.g., translations).</p>"},{"location":"items/#texture","title":"Texture","text":"<p>All items textures are stored in a single 1024x1024 texture atlas. Each textures are 16x16 in size, so the atlas consists of 64 rows and 64 columns, giving us a total of 4096 available texture slots.</p> <p>You can access the texture atlas in <code>res/textures/items.png</code>.</p> <p>When registering a new Item, you assign a texture to said Item by specifying its X and Y coordinates, which is the row and the column number multiplied by 16.</p>"},{"location":"items/#3d-model","title":"3D Model","text":"<p>An Item can have a 3D hand model, which will be displayed when the player hold the Item in their hotbar slot.</p> <p>With an Item instance, a 3D model can be assigned with:</p> <pre><code>Item.SetModel(str model, str texture);\n</code></pre> <p>The game takes models from <code>res/models</code> and textures from <code>res/textures</code>. Basically, a 3D model consists of two elements: the shape (model) and the texture.</p> Example<pre><code>// Register the item\nItem obsidian_sword = new Item(0, 144, \"obsidian_sword\");\n// Set a 3D hand model\nobsidian_sword.SetModel(\"item.sword\", \"item.obsidian_sword\");\n</code></pre> <p>We use the <code>sword</code> base model from <code>res/models/item/sword.json</code>, and apply our texture from <code>res/textures/item/obsidian_sword.png</code>.</p>"},{"location":"items/#stack-size","title":"Stack Size","text":"<p>All items by default can be stacked up to 512. This can be overriden with:</p> <pre><code>Item.SetStackSize(int stack);\n</code></pre>"},{"location":"items/#tags","title":"Tags","text":"<p>To change an Item's properties, we use Tags.</p> <p>By adding a Tag, you are adding a TagEntry.</p> <pre><code>Item.AddTag(ItemTagEntry tagEntry);\n</code></pre> <p>A TagEntry consists of a Tag, and its integer value. All tags have a value assigned to it, and this value determines the effectiveness of said tags.</p> <pre><code>ItemTagEntry tag = new ItemTagEntry(ItemTag tag, int value);\n</code></pre> Example<pre><code>// Register the item\nItem cool_pickaxe = new Item(16, 192, \"obsidian_sword\");\n// Assign it a tag (pickaxe power)\ncool_pickaxe.AddTag(new ItemTagEntry(ItemTag.pickaxe, 8));\n</code></pre> <p>In the above example, we assigned a Tag (<code>ItemTag.pickaxe</code>) which in turns assigns the Item <code>cool_pickaxe</code> a pickaxe power of 8.</p> <p>Tags are powerful, and can be used to do various things. More information about it can be found in its dedicated Tags section.</p>"},{"location":"items/tags/","title":"More about Tags","text":""},{"location":"items/tags/#adding-a-new-tag","title":"Adding a new Tag","text":"<p>Tag are similar to Item in the sense that registration is done through instantiating a new Tag instance.</p> <pre><code>ItemTag tag = new ItemTag(str tagId, bool isHidden = false, bool hasIcon = false, int x, int y);\n</code></pre> <ul> <li><code>tagId</code>: the string identifier of the Tag</li> <li><code>isHidden</code>: whether or not the Tag will be shown in the Item tooltip</li> <li><code>hasIcon</code>: whether or not the Tag have an icon, won't be shown if <code>isHidden</code> is false</li> <li><code>x</code> and <code>y</code>: texture coordinates (X and Y) of the Tag icon</li> </ul> <p>A Tag can have an icon, which similarly to Item is also stored in a texture atlas (<code>res/textures/ui.png</code>).</p>"},{"location":"items/tags/#default-tags","title":"Default tags","text":"<p>The game has quite a few set of default tags for various properties.</p> String ID Internal Description can_place <code>ItemTag.can_place</code> Used for Block, determine whether or not the Item can be placed. can_consume <code>ItemTag.can_consume</code> Whether or not the Player can consume the Item. cant_mine <code>ItemTag.cant_mine</code> Whether or not the Item can be used to mine Block. axe_power <code>ItemTag.axe</code> Whether or not the Item is an axe, and the power of it. hammer <code>ItemTag.hammer</code> Whether or not the Item is a hammer. melee_damage <code>ItemTag.melee_damage</code> The melee damage of the Item. pickaxe_power <code>ItemTag.pickaxe</code> Whether or not the Item is a pickaxe, and the power of it. swing_speed <code>ItemTag.swing_speed</code> The swing/usage cooldown of the Item. restores_health <code>ItemTag.restores_health</code> How much health is restored upon Item consumption. defence <code>ItemTag.defence</code> Used for Armor, how much defense is granted to the Player when wearing the Item. required_ammo <code>ItemTag.required_ammo</code> Whether or not the Item requires Ammo. ammo <code>ItemTag.ammo</code> Whether or not the Item is an Ammo. ranged_damage <code>ItemTag.ranged_damage</code> The ranged damage of the Item. trinket <code>ItemTag.trinket</code> Whether or not the Item is a Trinket."}]}